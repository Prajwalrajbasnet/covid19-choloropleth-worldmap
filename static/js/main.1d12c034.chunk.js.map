{"version":3,"sources":["utils/index.js","components/CovidMap.jsx","components/Legend.jsx","entities/LegendItem.js","entities/LegendItems.js","services/covidCountryService.js","assets/loader.gif","components/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["formatNumberWithCommas","number","num","Number","toString","replace","CovidMap","countries","console","log","MapContainer","style","height","zoom","center","GeoJSON","fillColor","weight","color","fillOpacity","data","onEachFeature","country","layer","properties","covidData","bindPopup","ADMIN","Confirmed","Active","Deaths","Recovered","options","Legend","legendItems","display","alignItems","map","item","backgroundColor","flex","justifyContent","textColor","fontWeight","fontSize","range","LegendItem","doesMatch","defaultColor","this","cases","casesSourceURL","countriesList","features","setCountryState","callback","papa","parse","download","header","complete","output","modifyCountriesList","covidDataOfCountry","find","caseEntry","ISO3","ISO_A3","findSuitableColor","matchingLegendItem","legendItem","Main","useState","setCountries","useEffect","covidCountryService","configureCountries","length","src","LoaderGif","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d12c034.chunk.js","sourcesContent":["export const formatNumberWithCommas = function (number) {\n\tconst num = Number(number);\n\treturn num ? num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') : 0;\n};\n","import { MapContainer, GeoJSON } from 'react-leaflet';\n\nimport { formatNumberWithCommas } from '../utils/';\n\nimport 'leaflet/dist/leaflet.css';\nimport './CovidMap.css';\n\nconst CovidMap = ({ countries }) => {\n\tconst mapStyle = {\n\t\tfillColor: 'white',\n\t\tweight: 1,\n\t\tcolor: 'black',\n\t\tfillOpacity: 1,\n\t};\n\n\tconst addObjectsOnEachCountry = (country, layer) => {\n\t\tcountry.properties.covidData &&\n\t\t\tlayer.bindPopup(` <b><center> ${\n\t\t\t\tcountry.properties.ADMIN\n\t\t\t} </center></b> <br>\n\t\t\t<span class=\"title\">Total Confirmed Cases</span>: ${formatNumberWithCommas(\n\t\t\t\tcountry.properties.covidData.Confirmed\n\t\t\t)} <br>\n\t\t\t<span class=\"blue-text title\">Active Cases</span>: ${formatNumberWithCommas(\n\t\t\t\tcountry.properties.covidData.Active\n\t\t\t)} <br>\n\t\t\t<span class=\"red-text title\">Deaths</span>: ${formatNumberWithCommas(\n\t\t\t\tcountry.properties.covidData.Deaths\n\t\t\t)} <br>\n\t\t\t<span class=\"green-text title\">Recovered</span>: ${formatNumberWithCommas(\n\t\t\t\tcountry.properties.covidData.Recovered\n\t\t\t)}\n\t\t`);\n\t\tlayer.options.fillColor = country.properties.color;\n\t};\n\n\tconsole.log(countries);\n\n\treturn (\n\t\t<MapContainer style={{ height: '90vh' }} zoom={2} center={[20, 100]}>\n\t\t\t<GeoJSON\n\t\t\t\tstyle={mapStyle}\n\t\t\t\tdata={countries}\n\t\t\t\tonEachFeature={addObjectsOnEachCountry}\n\t\t\t></GeoJSON>\n\t\t</MapContainer>\n\t);\n};\n\nexport default CovidMap;\n","const Legend = ({ legendItems }) => {\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'flex',\n\t\t\t\talignItems: 'stretch',\n\t\t\t}}\n\t\t>\n\t\t\t{legendItems.map((item) => (\n\t\t\t\t<div\n\t\t\t\t\tkey={item.range}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: item.color,\n\t\t\t\t\t\tflex: 1,\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\talignItems: 'center', // vertical\n\t\t\t\t\t\tjustifyContent: 'center', // horiztontal\n\t\t\t\t\t\tcolor: item.textColor,\n\t\t\t\t\t\tfontWeight: 'bolder',\n\t\t\t\t\t\tfontSize: '1em',\n\t\t\t\t\t\theight: '10vh',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<span>{item.range}</span>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default Legend;\n","class LegendItem {\n\tdefaultColor = 'black';\n\tconstructor(range, color, doesMatch, textColor) {\n\t\tthis.range = range;\n\t\tthis.color = color;\n\t\tthis.doesMatch = doesMatch;\n\t\tthis.textColor = textColor != null ? textColor : this.defaultColor;\n\t}\n}\n\nexport default LegendItem;\n","import LegendItem from './LegendItem';\n\nconst legendItems = [\n\tnew LegendItem(\n\t\t'0 - 49,999',\n\t\t'#ebd4d4',\n\t\t(cases) => cases >= 0 && cases < 50000\n\t),\n\n\tnew LegendItem(\n\t\t'50,000 - 200,000',\n\t\t'#d8aaaa',\n\t\t(cases) => cases >= 50000 && cases < 200000\n\t),\n\n\tnew LegendItem(\n\t\t'200,000 - 499,999',\n\t\t'#c57f7f',\n\t\t(cases) => cases >= 200000 && cases < 500000\n\t),\n\n\tnew LegendItem(\n\t\t'500,000 - 999,999',\n\t\t'#9c2929',\n\t\t(cases) => cases >= 500000 && cases < 1000000,\n\t\t'white'\n\t),\n\n\tnew LegendItem(\n\t\t'1,000,000 +',\n\t\t'#741f1f',\n\t\t(cases) => cases >= 1000000,\n\t\t'white'\n\t),\n];\n\nexport default legendItems;\n","import { features } from '../data/countries.json';\nimport papa from 'papaparse';\n\nimport legendItems from '../entities/LegendItems';\nclass CovidCountryService {\n\tcasesSourceURL =\n\t\t'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv';\n\n\tcountriesList = features;\n\n\tsetCountryState = () => {};\n\n\tconfigureCountries(callback) {\n\t\tthis.setCountryState = callback;\n\t\tpapa.parse(this.casesSourceURL, {\n\t\t\tdownload: true,\n\t\t\theader: true,\n\t\t\tcomplete: (output) => this.modifyCountriesList(output.data),\n\t\t});\n\t}\n\n\tmodifyCountriesList(covidData) {\n\t\tthis.countriesList = this.countriesList.map((country) => {\n\t\t\tconst covidDataOfCountry = covidData.find(\n\t\t\t\t(caseEntry) => caseEntry.ISO3 === country.properties.ISO_A3\n\t\t\t);\n\t\t\tcountry.properties.covidData = {};\n\t\t\tif (covidDataOfCountry != null) {\n\t\t\t\tcountry.properties.covidData = covidDataOfCountry;\n\t\t\t}\n\n\t\t\tthis.findSuitableColor(country);\n\t\t\treturn country;\n\t\t});\n\n\t\tthis.setCountryState(this.countriesList);\n\t\t// console.log('here: ', this.countriesList);\n\t}\n\n\tfindSuitableColor(country) {\n\t\tconst matchingLegendItem = legendItems.find((legendItem) =>\n\t\t\tlegendItem.doesMatch(country.properties.covidData.Active)\n\t\t);\n\t\t// console.log(matchingLegendItem.color);\n\n\t\tif (matchingLegendItem) {\n\t\t\tcountry.properties.color = matchingLegendItem.color;\n\t\t} else if (\n\t\t\t!country.properties.covidData.Active ||\n\t\t\tcountry.properties.covidData.Active === 0\n\t\t) {\n\t\t\tcountry.properties.color = 'white';\n\t\t}\n\t}\n}\n\nexport default new CovidCountryService();\n","export default __webpack_public_path__ + \"static/media/loader.9ee93672.gif\";","import { useState, useEffect } from 'react';\n\nimport CovidMap from './CovidMap';\nimport Legend from './Legend';\n\nimport covidCountryService from '../services/covidCountryService';\nimport legendItems from '../entities/LegendItems';\n\nimport LoaderGif from '../assets/loader.gif';\n\nconst Main = () => {\n\tconst [countries, setCountries] = useState([]);\n\n\tuseEffect(() => {\n\t\tcovidCountryService.configureCountries((countries) =>\n\t\t\tsetCountries(countries)\n\t\t);\n\t}, []);\n\n\tconst loaderStyles = {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\theight: '100vh',\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{countries.length <= 0 ? (\n\t\t\t\t<div style={loaderStyles}>\n\t\t\t\t\t<img src={LoaderGif} alt=\"loading....\" />\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div>\n\t\t\t\t\t<CovidMap countries={countries}></CovidMap>\n\t\t\t\t\t<Legend legendItems={legendItems}></Legend>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default Main;\n","import './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n\treturn <Main></Main>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}